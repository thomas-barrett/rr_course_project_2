df2
heatmap(df2)
scale(df2)
scale(df2)
class(scale(df2))
heatmap(scale(df2))
heatmap(scale(df2))
heatmap(df2)
svd1 <- svd(scale(df2))
svd1$u
svd1$u[ ,1]
?t
svd$v
svd$v
svd1$v
svd1$d
svd1$u %*% diag(svd1$d) %*% svd1$v
scale(df2)
svd1$u %*% diag(svd1$d) %*% t(svd1$v)
swirl()
library(swirl)
swirl()
rm(list = ls())
swirl()
0
swirl()
swirl()
head(dataMatrix)
heatmap(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
swirl()
swirl()
library(swirl)
rm(list = ls())
swirl()
swirl()
rm(list = ls())
dir.create("C:/Rtmp")
cat("TMPDIR = C:\\\\Rtmp", file = "~/.Renviron", sep = "\n")
rm(list = ls())
tempdir()
library(ggplot2)
qplot(mpg, hp, mtcars)
qplot(mpg, hp, mtcars)
?qplot
qplot(x = mpg, y = hp, data = mtcars)
qplot(x = disp, y = hp, data = mtcars)
mtcars
qplot(x = mpg, data = mtcars)
x <- mtcars$mpg
y <- mtcars$disp
?plot
plot(x, y)
plot(y, x)
plot(x, mtcars$drat)
plot(x, mtcars$drat)
plot(x, mtcars$drat)
plot(x, mtcars$cyl)
ls()
rm(list = ls())
dist(mtcars)
cluster <- hclust(dist(mtcasrs))
cluster <- hclust(dist(mtcars))
class(cluster)
cluster$order
plot(cluster)
abline(h = 150, col = "red")
plot(cluster)
abline(h = 170, col = "red")
plot(cluster)
abline(h = 181, col = "red")
df <- cbind(mtcars$mpg, mtcars$disp)
df
df <- cbind(mtcars$disp, mtcars$mpg)
df
d_df <- dist(df)
d_df
?min
col_mins <- integer(0)
for (i in 1:dim(d_df)[2]){
col_mins[i] <- min(d_df[, i])
}
min <- min(col_mins)
dim(d_df)[2]
dim(d_df)
d_df
class(d_df)
dm <- as.matrix(d_df)
col_mins <- integer(0)
for (i in 1:dim(dm)[2]){
col_mins[i] <- min(dm[, i])
}
min <- min(col_mins)
min
col_mins
dim(dm)[2]
min(dm[, 3])
min(dm[, 4])
head(dm)
min(dm[, 4])
min(dm$2)
dm[, 4])
dm[, 4]
?min
dm <- as.matrix(d_df)
col_mins <- integer(0)
for (i in 1:dim(dm)[2]){
col_mins[i] <- min(dm[, i], na.rm = TRUE)
}
min <- min(col_mins)
min
min(dm[, 4], na.rm = TRUE)
class(dm[, 4])
min(3:16)
dm[, 4]
max(dm[, 4])
dm <- as.matrix(d_df)
col_mins <- integer(0)
for (i in 1:dim(dm)[2]){
col_mins[i] <- min(dm[, i], na.rm = TRUE)
}
min <- min(col_mins)
min
col_mins
dm
d_df <- dist(df)
d_df
?cm.colors
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
rm(list = ls())
rm(list = ls())
library(swirl)
swirl()
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(cx, cy)
mdist(x, y, cx, y)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
play()
x
newClust
class(newClust)
mean(1:13)
mean(1:14)
nxt()
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx)
points(newCx newCy, col = cols1, pch = 8, cex = 2, wd = 2)
points(newCx newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, pch = 2)
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
play()
head(dataMatrix)
head(dataMatrix)
head(dataMatrix)
head(dataMatrix)
head(dataMatrix)
head(dataMatrix)
nxt()
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
bye()
rm(list = ls())
library(swirl)
swirl()
rm(list = ls())
mtrx <- as.matrix(mtcars)
mtrx
class(mtrx)
names(matrix)
names(mtrx)
mtrx[1,1]
decomp <- svd(mtrx)
decomp
mtrx_u <- decomp$u
mtrx_v <- decomp$v
d <- decomp$d
diag(d)
mtrx_d <- diag(d)
mtrx_u %*% mtrx_d %*% t(mtrx_v)
rm(list = ls())
library(swirl)
swirl()
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[, 1] * svd1$d[1]) %*% t(svd1$v[, 1])
myImage(a1)
a2 <- svd1$u[, 1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[, 1:2])
myImage(a2)
myImage(svd1$u[, 1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[, 1:5]))
myImage(svd1$u[, 1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[, 1:10]))
rm(list = ls())
table(mtcars$cyl)
table(rep(1:5, times = 7))
table(rep(1:5, each = 7))
table(mtcars$gear)
table(mtcars$carb)
class(table(mtcars$cyl))
sum(table(rep(1:5, each = 7)))
?subset
plot(mtcars$mpg, col = mtcars$cyl)
legend("bottomright",legend=unique(mtcars$cyl),col=unique(mtcars$cyl), pch = 1)
unique(mtcars$cyl)
mtcars$cyl
?unique
?uncalss
?unclass
rm(list = ls())
library(swirl())
swirl()
names(sub1[maxCon])
kclust <- kmeans(sub1[, -c(562, 563)], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
play()
?subset
nxt()
play()
rm(kclust)
nxt()
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
play()
class(kClust$cluster)
(kClust$cluster
kClust$cluster
kClust$cluster
nxt()
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- kClust$size == 29
laying <- kClust$size==29
laying <- which(kClust$size == 29)
play()
laying
nxt()
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[, 1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
rm(list = ls())
x <- mtcars$mpg
plot(x, col = 4)
plot(x, col = 5)
plot(x, col = 6)
plot(x, col = 5)
plot(x, col = 6)
plot(x, col = 6)
plot(x, col = 4)
plot(x, col = 5)
volcano
heatmap(volcano)
image(volcano)
heat.colors()
colorRamp(c("cyan", "magenta"))
fun <- colorRamp(c("cyan", "magenta"))
fun(0)
plot(x, col = fun(0))
plot(x, col = fun(1))
plot(x, col = fun(0.5))
?plot
as.hexmode(255)
fun(0)
color <- "#00FFFF"
plot(x, col = color
)
plot(x, col = color)
fun(0.5)
as.hexmode(fun(0.5)[1, 1])
as.hexmode(127.5)
as.hexmode(128)
color <- "#8080FF"
plot(x, col = color)
rm(list = ls())
library(swirl)
rm(list = ls())
swirl()
bye()
rm(list = ls())
str(mtcars)
s <- "sdlfkjsdk*afslkdfjksldaj*fsjdk*sldfijakl*fasdlkjh*jfkds*j*akjdlf*falkjdl*dakjlfk88JKHJKHKJ*HKJHJKKJ*KUHHJH*H*HKJUHUH*U"
?strsplit
jumbles <- strsplit(s, "*")
jumbles
jumbles <- strsplit(s, "*", fixed = TRUE)
jumbles
?make.names
mean(mtcars$mpg > 25)
mtcars(mpg)
mtcars$mpg
x <- mtcars$mpg[mtcars$mpg > 25]
x
length(x) / length(mtcars$mpg)
mtcars$mpg > 25
summary(mtcars$mpg)
?mtcars
log10(-1)
?hist
intesect(1:50, 60:12)
intersect(1:50, 60:12)
intersect(50:1, 70:40)
intersect(60:12, 1:50)
mtcars
df <- subset(mtcars, mpg > 18 & cyl %in% c(6, 8))
df
rm(list = ls())
mean(mtcars$mpg > 18.5)
names(mtcars)
rm(list = ls())
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both(intersect(site0, site1))
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, state.code == 36 & county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
play()
str(pm0)
str(pm0sub)
str(pm1sub)
nxt()
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1, 2))
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y, ]
rm(list = ls())
rm(list = ls())
rm(list = ls())
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, mpg)
play()
nxt()
qplot(displ, hwy, mpg)
rm(list = ls())
bye()
swirl()
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = ("point", "smooth"), facets = .~drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(3, 3))
plot(myx, myy, type = "l", ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Hwy Mileage", title = "Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
rm(list = ls())
library(swirl)
swirl()
swirl()
rm(list = ls())
rm(list = ls())
pairs(mtcars)
mtcars
rm(list = ls())
x <- "47f11537f8740af8e07d6facc3d9645"
length(x)
nchar(x)
install.packages("holdem")
library(holdem)
//holdem
?holdem
??holdem
x < "49e36bee2cd4c01679ba3189719e5c7958e1c5ff"
x <- "49e36bee2cd4c01679ba3189719e5c7958e1c5ff"
length(x)
nchar(x)
?impute
??impute
sessionInfo()
library(dplyr)
sessionInfo()
install.packages("cacher")
library(cacher)
install.package("cacher")
?install.packages
install.packages("cacher")
rm(list = ls())
setwd("C:/Users/stick/data science/coursera/Reproducible Research/Week 4 Project")
library(R.utils)
library(data.table)
wd <- getwd()
print(paste("Your working directory is set to", wd))
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
"rawdata.csv.bz2")
bunzip2("rawdata.csv.bz2", "rawdata.csv", skip = TRUE, remove = FALSE)
df <- fread("rawdata.csv")
head(df)
str(df)
sample(df$EVTYPE, 100)
sample(df$EVTYPE, 100)
unique(df$EVTYPE)
length(unique(df$EVTYPE))
?sort
sort(unique(df$EVTYPE))
install.packages("stringdist")
sessionInfo()
